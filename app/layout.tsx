'use client'

import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { toast, ToastContainer } from 'react-toastify';

import bgimg from './bg2.jpg'
import Image from 'next/image'
import { createContext, useEffect, useState } from "react";
import Comps from "@/components/all";
import Cookies from 'universal-cookie'

const inter = Inter({ subsets: ["latin"] });

// export async function getStaticProps() {
//   const issueResponse = await fetch('/issues');
//   const issues = await issueResponse.json();
//   const userResponse = await fetch('/user');
//   const user = await userResponse.json();
//   return { props: { issues, user } };
// }

// export const metadata: Metadata = {
//   title: "Synapse",
//   description: "Generated by create next app",
// };

export const DataContext = createContext({}
  // user, setUser, issues, setIssues
);


export default function RootLayout({children}: Readonly<{  children: React.ReactNode;}>) {
  // const [open, setOpen] = useState(false);
  
  const cookie = new Cookies();
  const [loggedIn, setLoggedIn] = useState(cookie.get('loginSession')!=null?cookie.get('loginSession'):{});
  const [ISChage, setISChage] = useState(false);
  const [UChange, setUChange] = useState(false);
  const [iss, setIss] = useState([]);
  
  const [issues, setIssues] = useState([]);
  const [user, setUser] = useState(cookie.get('loginSession')!=null?cookie.get('loginSession'):{});;
  cookie.set("loginSession",user, {path:'/', expires:(new Date(Date.now() + 24*14*60*60*1000))})

  useEffect(() => {
    const fetchData = async () => {
      if(user && user._id){
        const response = await fetch('http://localhost:4000/user/getUser', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({id:user._id }),
        })
        .then (async res => {
            // setISChage(c=>!c)
            const jsonData = await res.json();
            // console.log(jsonData.user);
          
            setUser(jsonData.user);
            cookie.set("loginSession",jsonData.user, {path:'/', expires:(new Date(Date.now() + 24*14*60*60*1000))})
            // router.push("/")
          })
          .catch(err => {console.log(err)});
          
        };
      }
      
      fetchData();
    }, [UChange]);
    
  // useEffect(()=>{
  //   const issueResponse = fetch('/issues');
  //   // setIssues(await (await issueResponse).json());
  //   issueResponse.then(res=>res.data.issues && setIssues(res.data.issues));
  // },issues)
  // useEffect(()=>{
  //   const userResponse = fetch('/user');
  //   userResponse.then(res=>res.data.user && setUser(res.data.users));
  // },issues)
  return (
    <html lang="en">
      <body className={inter.className}>
          <div className="absolute h-screen w-screen">
            <Image src={bgimg} layout="fill" objectFit="cover" alt="Background Image" />
            <Comps user={user} setUser={setUser}/>
            <ToastContainer
              position="top-right"
              autoClose={1000}
              hideProgressBar={false}
              newestOnTop={false}
              closeOnClick
              rtl={false}
              pauseOnFocusLoss
              draggable
              pauseOnHover
              theme="colored"
              // transition= "Bounce"
              // className='z-40'
              />
              </div>
{/* Same as */}
{/* <ToastContainer /> */}
          <DataContext.Provider value={{ issues, user, setIssues, setUser, ISChage, setISChage, iss, setIss, setUChange }}>
            {children} 
          </DataContext.Provider>
      </body>
    </html>
  );
}
